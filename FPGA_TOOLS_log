--------------------------------------------------------
Xilinx Installation Instructions:

1 - Install ISE Xilinx

	-> Set environment variables

2 - vim ~/.bashrc

	LM32_TOOLS=/opt/gcc-lm32/bin
	XILINX=/opt/Xilinx/13.4/ISE_DS
	export XILINX
	HOST_PLATFORM=lin64
	export HOST_PLATFORM
	XILINX_BIN=${XILINX}/ISE/bin/${HOST_PLATFORM}
	export XILINX_BIN
	PATH=${PATH}:${XILINX_BIN}:${LM32_TOOLS}
	#export LD_PRELOAD="/usr/local/lib/libusb-driver.so"

	-> save and exit (:wq)

	-> Install Xilinx Cable drivers

3 -	sudo apt-get install git-core gitk git-gui libusb-dev build-essential libc6-dev-i386 fxload

4 - cd /opt/Xilinx sudo 
5 - git clone git://git.zerfleddert.de/usb-driver
7 - cd usb-driver
8 - make

9 - ./setup_pcusb /opt/Xilinx/13.4/ISE_DS/ISE/

	-> Optional! Make the installed library to be load before any others (Isn't there a better way?)

11 - echo "export LD_PRELOAD=/usr/local/lib/libusb-driver.so" >> $XILINX/settings64.sh

	or export the variable by "hand"

11.1 - vim ~/.bashrc
11.2 - export LD_PRELOAD=/usr/local/lib/libusb-driver.so

	-> save and exit (:wq)

12 - Don't forget to source the settings32.sh (32-bit systems) or settings64.sh(64-bit systems) file

	-> . /opt/opt/Xilinx/13.4/ISE_DS/settings64.sh

=========THE STEPS BELOW DO NOT WORK!=========

	-> In order to license ISE with a USB Dongle it is necessary to
		install the FLEX ID usb drivers (based on http://www.bluevirus.ch/?blog_sel%5B0%5D=52):

	-> Installing Alien (Conveert to .rpm to .deb packages)

12 - sudo apt-get install alien

	-> This rpm package used chkconfig in order to control system services

13 - sudo apt-get install chkconfig

	-> Unpack rpm package

14 - sudo alien -g -c aksusbd-redhat-1.14-3.i386.rpm
15 - cd aksusbd-redhat-1.14

	-> Rename the debian folder as we are going to build the debian
		package with dpkg -b not running the rules script!

16 - sudo mv debian/ DEBIAN/

	-> Modify the DEBIAN/control file to adhere to the specified format

17 - sudo vim DEBIAN/control
	> Remove the empty line after Maintainer:
	> change i386 to amd64 after Architecture
	> Delete remaining content of the line that starts with Depends
	> Add a line with a version number like Version: 8.6.0
	> Make sure that there is an empty line at the end of the document

	-> Move the aksusbd init script from etc/rc.d/init.d/ to etc/init.d/

18 - sudo mv etc/{rc.d/init.d,}

	-> Change write permissions temporarily

19 - sudo chmod +w etc/init.d/aksusbd

	-> Source the correct function library. In Ubuntu it is located at
		/lib/lsb/init-functions.

20 - vim etc/init.d/aksusbd

	-> Change the following line:

  9 . /etc/rc.d/init.d/functions

	to

  9 . /lib/lsb/init-functions

	-> save and exit (:wq)

	-> Restore permissions

21 - sudo chmod -w etc/init.d/aksusbd


	-> Modify the preinst script that blocks the installation.
		just comment out the section:

22 - sudo vim DEBIAN/preinst

	> if [ ! -e /etc/redhat-release ] ; then
	>    echo "ERROR This package can only be installed in Redhat Linux ! "
	>    false
	> else

	...

	> fi

	-> It will look like this:

	> #if [ ! -e /etc/redhat-release ] ; then
  	> #   echo "ERROR This package can only be installed in Redhat Linux ! "
  	> #   false
  	> #else

	...

	> # fi

	-> change the path to the aksusbd init script in all debian scripts.

23 - 
	for file in DEBIAN/{preinst,postinst,prerm}; do
		sudo sed -i -e 's|/etc/rc.d/init.d/|/etc/init.d/|g' $file
	done

	-> Remove invalid characters in aksusb script

24 - sudo sed -i.bak -e 's|$\"\(.*\)\"|\"\1\"|g' etc/init.d/aksusbd
25 - sudo sed -i.bak -e 's|$(\(.*\))|\`\1\`|g' etc/init.d/aksusbd

	-> Trying to use the lsb_functions

	-> cd /op	hange daemon to start_daemon, failure to log_failure_msg and success to log_success_msg

	-> Make the scripts (postinst preinst prerm) executables

24 - sudo chmod +x DEBIAN/{postinst,preinst,prerm}

	-> Build the package

	-> Symlink insserv binary as aksusbd is looking at the wrong place.
		is there a better way to fix this?

25 - sudo ln -s /usr/lib/insserv/insserv /sbin/insserv

	-> Create lock directories if nonexistent

26 -  sudo vim etc/init.d/aksusbd

	-> Add the following:

	# Create var/lock/subsys directory
	if [ ! -d /var/lock/subsys ]; then
		mkdir /var/lock/subsys
	fi

	-> just before the following:

	# See how we were called.
	case "$1" in
		start)

		...

	-> save and exit (:wq)

	-> Intall FLEXId utilities from
		http://www.globes.com/support/fnp_utilities_download.htm#downloads.

	-> Copy the lmutil, lmadmin and lmgrd to /usr/local/sbin

25 - tar xvf lmutil_x64_lsb.tar.gz
26 - tar xvf lmgrd_x64_lsb.tar.gz

27 - sudo cp lmutil lmgrd lmadmin-i86_lsb-11_11_0_0.bin /usr/local/sbin/

	-> Make lmadmin executable

28 - sudo chmod +x /usr/local/sbin/lmadmin-i86_lsb-11_11_0_0.bin

	-> Symlink to lmadmin

29 - sudo ln -s lmadmin-i86_lsb-11_11_0_0.bin /usr/local/sbin/lmadmin

	-> Run lmadmin

30 - /usr/local/sbin/lmadmin

31 - sudo dpkg -b aksusbd-redhat-1.14

	-> Install it!

32 - sudo dpkg -i aksusbd-redhat-1.14.deb

=========THE STEPS ABOVE DO NOT WORK!=========

	-> There is a workaround for this issue.
		See local file Xilinx_Install/Xilinx Issues

--------------------------------------------------------
Installing Ubunutu Terminal Instructions:
Source: http://strdoc.com/comment/417

	-> Install minicom

1 - sudo apt-get install minicom

	-> Find the name your serial port

2 - dmesg | grep tty

	-> in the output look for something like "ttyUSB0".
		My output was something like this:

[    0.000000] console [tty0] enabled
[    3.815470] serial8250: ttyS0 at I/O 0x3f8 (irq = 4) is a 16550A
[    3.948477] 00:07: ttyS0 at I/O 0x3f8 (irq = 4) is a 16550A
[    4.004167] 0000:00:03.3: ttyS4 at I/O 0xecb8 (irq = 17) is a 16550A
[195933.979161] usb 4-1: cp210x converter now attached to ttyUSB0
[196991.760206] cp210x ttyUSB0: cp210x converter now disconnected from ttyUSB0
[199153.839153] usb 4-1: cp210x converter now attached to ttyUSB0
	-> This means the device correspond to my serial port is ttyUSB0.
	-> Configure minicom

3 - sudo minicom -s

	-> Use the keyboard keys to select the menu item Serial port setup.
	-> Enter A to change the Serial Device to /dev/ttyUSB0, 
		and then enter E to change the line speed to 9600 8N1
	-> Using arrow keys, select Save setup as dfl
	-> Select Exit from Minicom.
	-> Next time, from the terminal, you only need to run 
		"sudo minicom" in order to start the terminal application.

--------------------------------------------------------
Linux Chipscope Installation Instructions:

	Source:
	http://xlnx.lithium.com/t5/Installation-and-Licensing/
	ISE-12-1-Linux-Installs/td-p/69399

	-> On Ubuntu (specifically), calling the chipscope (analyzer)
	by the command line issues an error:

	"
	...
	/opt/Xilinx/13.4/ISE_DS/ISE/bin/lin64/unwrapped/analyzer: 74:
	/opt/Xilinx/13.4/ISE_DS/ISE/bin/lin64/unwrapped/cs_common.sh:
	XIL_DIRS[1]=/opt/Xilinx/13.4/ISE_DS/ISE/: not found
	...
	"

	-> Along with others of the same kind.

	-> The problem resides on the interpreter called within the script
	(#!/bin/sh). As on Ubunutu sh points to dash and not to bash, 
	inconsistencies will appear. To fix the issue you have to 
	reconfigure ubunutu to use bash	instead of dash (just changing
	the shebang to #!/bin/bash did not work for me).

	-> Issue the following command:

	1 -sudo dpkg-reconfigure sh

	-> Selects no when prompted. This should solve the issue

--------------------------------------------------------
HDL make Installation Instructions:


	-> Put hdlmake in a directory listed in PATH, for example:

1 - sudo ln -s <PATH_TO_HDLMAKE> /usr/bin/hdlmake

	-> Generate the makefiles

2 - hdlmake --ise-proj --make-ise

	-> Build it! Synthetize. You may the time command in order to
		verify how much time was spent during synthesis. Additionally,
		we redirect the stdout and stderr to a file. Otherwise, it
		wouldn't be possible to analyse the output log.

3 - time make local > synth_output.txt 2>&1

--------------------------------------------------------
Cross Compiling for LM32:

1 - Install missing libraries

	-> sudo apt-get install apt-get install lib32z1

2 - sudo mkdir /opt/gcc-lm32
3 - sudo tar xvf <path_to_lm32_gcc>.tar.xz

	-> Run specific makefile or add the CROSS_COMPILE environment variable as follows:

4 - CROSS_COMPILE="<path_to_lm32_gcc_toolchain>/bin/lm32-elf-"

